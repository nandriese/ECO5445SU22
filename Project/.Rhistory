plain.ascii = FALSE,
varnumbers = FALSE,
graph.magnif = 0.75,
valid.col    = FALSE),
method = "render")
# Chunk 7
cor(hd[,unlist(lapply(hd, is.numeric))], use = "complete.obs")
cor(hd$`Debt/IncomeTotal`,hd$school, use = "complete.obs")
cor(hd$TotalMIncomeApp,hd$school, use = "complete.obs")
hist(hd$`Debt/IncomeTotal`, xlab = "Debt/Income Total (in thousands)", xlim = c(0,150), breaks = 50)
hist(hd$school, xlab = "Years of Education", xlim = c(0,30), breaks = 15)
plot(hd$school,hd$TotalMIncomeApp, xlab = "Years of Education", ylab = "Total Monthly Income of Applicant")
plot(hd$school, hd$netw, ylim = c(-100,2000), xlab = "Years of Education", ylab = "Net Worth")
# More plots are in the figure above
# Chunk 8
hist(hd$YearsAppJob)
hd$YearsAppJob <- sqrt(hd$YearsAppJob) #skewed right
hist(hd$YearsAppJob, breaks = 20)
summary(hd$YearsAppJob)
hist(hd$YearsAppLW)
hd$YearsAppLW <- sqrt(hd$YearsAppLW) #skewed right
hist(hd$YearsAppLW, breaks = 20)
summary(hd$YearsAppLW)
hist(hd$TotalMIncomeApp)
hd$TotalMIncomeApp <- sqrt(hd$TotalMIncomeApp) #skewed
hist(hd$TotalMIncomeApp, breaks = 50)
summary(hd$TotalMIncomeApp)
hist(hd$TotalMIncomeCoApp)
hd$TotalMIncomeCoApp <- sqrt(hd$TotalMIncomeCoApp) #skewed right
hist(hd$TotalMIncomeCoApp, breaks = 50)
summary(hd$TotalMIncomeCoApp)
hist(hd$LiquidAssets)
hd$LiquidAssets <- sqrt(hd$LiquidAssets) #skewed right
hist(hd$LiquidAssets, breaks = 50)
summary(hd$LiquidAssets)
# Chunk 9
library(pROC)
library(rpart.plot)
library(rpart.plot)
library(party)
library(randomForest)
library(e1071)
library(jtools)
fit.hd <- glm(TypeAction ~ ., data = hd, family = "binomial", na.action = na.roughfix)
summ(fit.hd) #***
prob.dh <-predict(fit.hd, hd, type = "response", na.action = na.roughfix)
logit.pred <- factor(prob.dh > .50, levels = c(FALSE, TRUE),labels = c("Loan Denied", "Loan Approved")) #why would I get NA's here and how can I get rid of them?
logit.perf <-  table(hd$TypeAction, logit.pred, dnn = c("Actual", "Predicted"))
logit.perf
# Chunk 10
my_roc <- roc(hd$TypeAction ~ prob.dh, plot = TRUE)
auc(my_roc)
# Chunk 11
# Finds Optimal threshold
coords(my_roc, "best", ret = "threshold")
threshold <- my_roc$thresholds[which.max(my_roc$sensitivities + my_roc$specificities)]
threshold
logit.pred.thresh <- factor(prob.dh > threshold, levels = c(FALSE, TRUE),labels = c("Loan Denied", "Loan Approved")) #why would I get NA's here and how can I get rid of them?
logit.perf.thresh <-  table(hd$TypeAction, logit.pred.thresh, dnn = c("Actual", "Predicted"))
logit.perf.thresh
# Chunk 12
logit.pred70<- factor(prob.dh > .70, levels = c(FALSE, TRUE),labels = c("Loan Denied", "Loan Approved")) #why would I get NA's here and how can I get rid of them?
logit.perf70 <-  table(hd$TypeAction, logit.pred70, dnn = c("Actual", "Predicted"))
logit.perf70
# Chunk 13
logit.pred65<- factor(prob.dh > .65, levels = c(FALSE, TRUE),labels = c("Loan Denied", "Loan Approved")) #why would I get NA's here and how can I get rid of them?
logit.perf65 <-  table(hd$TypeAction, logit.pred65, dnn = c("Actual", "Predicted"))
logit.perf65
# Chunk 14
logit.pred85<- factor(prob.dh > .85, levels = c(FALSE, TRUE),labels = c("Loan Denied", "Loan Approved")) #why would I get NA's here and how can I get rid of them?
logit.perf85 <-  table(hd$TypeAction, logit.pred85, dnn = c("Actual", "Predicted"))
logit.perf85
# Chunk 15
logit.pred80<- factor(prob.dh > .80, levels = c(FALSE, TRUE),labels = c("Loan Denied", "Loan Approved")) #why would I get NA's here and how can I get rid of them?
logit.perf80 <-  table(hd$TypeAction, logit.pred80, dnn = c("Actual", "Predicted"))
logit.perf80
# Chunk 16
logit.pred05<- factor(prob.dh > .05, levels = c(FALSE, TRUE),labels = c("Loan Denied", "Loan Approved")) #why would I get NA's here and how can I get rid of them?
logit.perf05 <-  table(hd$TypeAction, logit.pred05, dnn = c("Actual", "Predicted"))
logit.perf05
# Chunk 17
logit.pred60<- factor(prob.dh > .60, levels = c(FALSE, TRUE),labels = c("Loan Denied", "Loan Approved")) #why would I get NA's here and how can I get rid of them?
logit.perf60 <-  table(hd$TypeAction, logit.pred60, dnn = c("Actual", "Predicted"))
logit.perf60
# Chunk 18
logit.pred55<- factor(prob.dh > .55, levels = c(FALSE, TRUE),labels = c("Loan Denied", "Loan Approved")) #why would I get NA's here and how can I get rid of them?
logit.perf55 <-  table(hd$TypeAction, logit.pred55, dnn = c("Actual", "Predicted"))
logit.perf55
# Chunk 19
logit.pred30<- factor(prob.dh > .30, levels = c(FALSE, TRUE),labels = c("Loan Denied", "Loan Approved")) #why would I get NA's here and how can I get rid of them?
logit.perf30 <-  table(hd$TypeAction, logit.pred30, dnn = c("Actual", "Predicted"))
logit.perf30
# Chunk 20
logit.pred25<- factor(prob.dh > .25, levels = c(FALSE, TRUE),labels = c("Loan Denied", "Loan Approved")) #why would I get NA's here and how can I get rid of them?
logit.perf25 <-  table(hd$TypeAction, logit.pred25, dnn = c("Actual", "Predicted"))
logit.perf25
# Chunk 21
#performance function
performance <- function(table, n = 4){
if(!all(dim(table) == c(2,2)))
stop("Must be a 2 x 2 table")
tn = table[1,1]
fp = table[1,2]
fn = table[2,1]
tp = table[2,2]
sensitivity = tp/(tp+fn)
specificity = tn/(tn+fp)
ppp = tp/(tp+fp)
npp = tn/(tn+fp)
hitrate = (tp+tn)/(tp+tn+fp+fn)
result <- paste0("Sensitivity = ", round(sensitivity,n),
"\nSpecificity = ",round(specificity,n),
"\nPositive Predictive Value = ", round(ppp,n),
"\nNegative Predictive Value = ", round(npp,n),
"\nAccuracy = ", round(hitrate,n))
cat(result)
}
performance(logit.perf05) # 0.05
performance(logit.perf25) # 0.25
performance(logit.perf30) # 0.30
performance(logit.perf) # 0.50
performance(logit.perf55) # 0.55**
performance(logit.perf60) # 0.60
performance(logit.perf65) # 0.65
performance(logit.perf70) # 0.70
performance(logit.perf80) # 0.80
performance(logit.perf85) # 0.85
performance(logit.perf.thresh) # 0.8979749
# Chunk 22
# do a cross
#install.packages("boot")
library(boot)
set.seed(1234)
train <- sample(nrow(hd), 0.7*nrow(hd))
hd.train <-  hd[train,]
hd.validate <- hd[-train,]
hd.train <- (na.roughfix(hd.train))
hd.validate <- (na.roughfix(hd.validate)) #replaces with mean or median depending on data type
table(hd.train$TypeAction)
table(hd.validate$TypeAction)
#cv.glm(hd.train, fit.hd, K = 10) #error with RaceCoApp column 33
train.fit <- cv.glm(data = hd.train[,-33], glmfit =  fit.hd, K = 10)
# Chunk 23
prediction <- predict(fit.hd, hd.validate, type = "response", select =train.fit$delta[2], na.action = na.roughfix)
cv.pred50 <- factor(prediction > .50, levels = c(FALSE, TRUE),labels = c("Loan Denied", "Loan Approved"))
cv.perf50 <-  table(hd.validate$TypeAction, cv.pred50, dnn = c("Actual", "Predicted"))
cv.perf50
# Chunk 24
my_roc.cv <- roc(hd.validate$TypeAction ~ prediction, plot = TRUE)
auc(my_roc.cv)
coords(my_roc.cv, "best", ret = "threshold")
threshold.cv <- my_roc.cv$thresholds[which.max(my_roc.cv$sensitivities + my_roc.cv$specificities)]
threshold.cv
cv.pred.thresh <- factor(prediction > threshold.cv, levels = c(FALSE, TRUE),labels = c("Loan Denied", "Loan Approved"))
cv.perf.thresh <-  table(hd.validate$TypeAction, cv.pred.thresh, dnn = c("Actual", "Predicted"))
cv.perf.thresh
# Chunk 25
cv.pred10 <- factor(prediction > .10, levels = c(FALSE, TRUE),labels = c("Loan Denied", "Loan Approved"))
cv.perf10 <-  table(hd.validate$TypeAction, cv.pred10, dnn = c("Actual", "Predicted"))
cv.perf10
# Chunk 26
cv.pred25 <- factor(prediction > .25, levels = c(FALSE, TRUE),labels = c("Loan Denied", "Loan Approved"))
cv.perf25 <-  table(hd.validate$TypeAction, cv.pred25, dnn = c("Actual", "Predicted"))
cv.perf25
# Chunk 27
cv.pred40 <- factor(prediction > .40, levels = c(FALSE, TRUE),labels = c("Loan Denied", "Loan Approved"))
cv.perf40 <-  table(hd.validate$TypeAction, cv.pred40, dnn = c("Actual", "Predicted"))
cv.perf40
# Chunk 28
cv.pred55 <- factor(prediction > .55, levels = c(FALSE, TRUE),labels = c("Loan Denied", "Loan Approved"))
cv.perf55 <-  table(hd.validate$TypeAction, cv.pred55, dnn = c("Actual", "Predicted"))
cv.perf55
# Chunk 29
cv.pred60 <- factor(prediction > .60, levels = c(FALSE, TRUE),labels = c("Loan Denied", "Loan Approved"))
cv.perf60 <-  table(hd.validate$TypeAction, cv.pred60, dnn = c("Actual", "Predicted"))
cv.perf60
# Chunk 30
cv.pred65 <- factor(prediction > .65, levels = c(FALSE, TRUE),labels = c("Loan Denied", "Loan Approved"))
cv.perf65 <-  table(hd.validate$TypeAction, cv.pred65, dnn = c("Actual", "Predicted"))
cv.perf65
# Chunk 31
cv.pred75 <- factor(prediction > .75, levels = c(FALSE, TRUE),labels = c("Loan Denied", "Loan Approved"))
cv.perf75 <-  table(hd.validate$TypeAction, cv.pred75, dnn = c("Actual", "Predicted"))
cv.perf75
performance(cv.perf10)
performance(cv.perf25)
performance(cv.perf40)
performance(cv.perf50)
performance(cv.perf55)
performance(cv.perf60) #***
performance(cv.perf65)
performance(cv.perf75)
performance(cv.perf.thresh) # 0.946
pre <- predict(fit.hd, hd, type = "response", select =train.fit$delta[2], na.action = na.roughfix)
xcv.pred60 <- factor(pre > .60, levels = c(FALSE, TRUE),labels = c("Loan Denied", "Loan Approved"))
xcv.perf60 <-  table(hd$TypeAction, xcv.pred60, dnn = c("Actual", "Predicted"))
xcv.perf60
my_roc.cvx <- roc(hd$TypeAction ~ pre, plot = TRUE)
auc(my_roc.cvx)
xcv.perf60
performance(xcv.perf60)
performance(logit.perf60)
auc(my_roc.cvx)
auc(my_roc)
xcv.perf60
logit.perf60
performance(xcv.perf60)
performance(logit.perf60)
xcv.perf60
logit.perf60
auc(my_roc.cvx)
auc(my_roc)
performance(xcv.perf60)
performance(logit.perf60)
xcv.perf60
logit.perf60
auc(my_roc.cvx)
auc(my_roc)
# Chunk 1: setup
knitr::opts_chunk$set(warning = FALSE, message = FALSE, echo = TRUE)
# Chunk 2: Import Data and Change Column Names
library(readr)
library(tidyverse)
hdata <- read_csv("hmda_sw.csv")
colnames(hdata) <- (c("SEQ", "LoanType", "LoanPurpose", "Occupancy","LoanAmmount", "TypeAction", "MSAloc", "CountyLoc", "RaceAppl","RaceCoApp", "SexApp", "SexCoApp", "ApplIncome", "PurchType","HMDAorig", "Correction1", "Correction2", "Correction3", "UnitsProp","MaritalSt", "DepApp", "YearsAppLW", "YearsAppJob", "SelfEmpApp","BaseMIncomeApp", "BaseMIncomeCoApp", "TotalMIncomeApp", "TotalMIncomeCoApp", "ProposedMHouseExp", "PurchasePrice", "OtherFinancing", "LiquidAssets", "CommercialCredit", "AppHistoryGood", "CreditLines", "CH_mortgage", "CH_consumer", "CH_public", "Debt/IncomeHousing", "Debt/IncomeTotal", "F_or_A_loan", "TermLoan", "SpecialLoanApp", "AppraisedValue", "TypeProperty", "PMIsought", "PMIdenied", "GrantDP", "CoSign", "UnverInfo", "Reviewed", "netw", "uria", "rtdum", "bd", "mi", "old", "vr", "school", "chvalc", "dnotown", "dprop"))
# Chunk 3: Data Cleaning
### Clean errors/missing observations ###
hdata[hdata == 999999.4] <- NA
hdata[hdata == 999999] <- NA
# Chunk 4: new dataset
hd <- hdata[ ,c("TypeAction", "Debt/IncomeTotal", "RaceAppl", "MaritalSt", "SelfEmpApp", "school", "LoanAmmount", "PurchType",  "PurchasePrice", "TermLoan", "F_or_A_loan",  "AppraisedValue", "PMIsought", "PMIdenied", "UnverInfo", "Reviewed", "dnotown", "YearsAppLW", "YearsAppJob", "netw", "Debt/IncomeHousing", "AppHistoryGood", "CH_mortgage", "CH_consumer",  "CH_public", "LiquidAssets", "TotalMIncomeApp", "TotalMIncomeCoApp", "OtherFinancing", "GrantDP", "CoSign", "uria",  "RaceCoApp", "SexApp", "SexCoApp", "DepApp", "old", "CountyLoc", "rtdum", "bd", "mi", "vr", "chvalc" )]
# Chunk 5: Factor Creation and Labeling
# Converting TypeAction to dummy variables of 0 (Denied and 1 (Approved)
hd$TypeAction[hd$TypeAction == 2] <- 1
hd$TypeAction[hd$TypeAction == 3] <- 0
hd$TypeAction <- as.factor(hd$TypeAction)
levels(hd$TypeAction) <- c("Loan Denied", "Loan Approved")
hd$CountyLoc <- as.factor(hd$CountyLoc)
levels(hd$CountyLoc) <- c("Suffolk", "other")
hd$RaceAppl<- as.factor(hd$RaceAppl)
levels(hd$RaceAppl) <- c("Black", "White")
table(hd$RaceCoApp)
hd$RaceCoApp[hd$RaceCoApp == 7] <- NA
hd$RaceCoApp<- as.factor(hd$RaceCoApp)
levels(hd$RaceCoApp) <- c("American Indian or Alaskan native", "Asian or Pacific Islander", "Black", "Hispanic", "White", "Other", "Not Applicable")
table(hd$SexApp)
hd$SexApp[hd$SexApp==3] <- NA
hd$SexApp<- as.factor(hd$SexApp)
levels(hd$SexApp) <- c("Male", "Female")
hd$SexCoApp[hd$SexCoApp==8] <- NA #invalid level of 8 needed to be removed
hd$SexCoApp[hd$SexCoApp==3] <- NA
hd$SexCoApp[hd$SexCoApp==4] <- NA
table(hd$SexCoApp)
hd$SexCoApp <- as.factor(hd$SexCoApp)
levels(hd$SexCoApp) <- c("Male", "Female")
hd$PurchType[hd$PurchType == 2 ] <- NA #moved to NA because causes issues in the cross validation (changes # of levels between groups)
hd$PurchType <- as.factor(hd$PurchType)
levels(hd$PurchType) <- c("Loan was not sold in calendar year covered by register", "FNMA", "FHLMC", "FMHA", "Commercial Bank", "Savings bank or savings association", "Life Insurance company", "Affiliate instituion")
hd$MaritalSt[hd$MaritalSt == "S"] <- "U"
hd$MaritalSt <- as.factor(hd$MaritalSt)
levels(hd$MaritalSt) <-  c("Married", "Unmarried (separated, single, divorced, or widowed)")
hd$SelfEmpApp <- as.factor(hd$SelfEmpApp)
levels(hd$SelfEmpApp) <- c("Not Self-employed", "Self-employed")
hd$AppHistoryGood[hd$AppHistoryGood==666] <- NA #cleaned value
hd$AppHistoryGood <- as.factor(hd$AppHistoryGood)
levels(hd$AppHistoryGood) <- c("No", "Yes")
hd$CH_mortgage <- as.factor(hd$CH_mortgage)
levels(hd$CH_mortgage) <-c("Not late mortgage payments", "No mortgage payment history", "ONe or two late mortgage payments", "More than two late mortgage payments")
hd$CH_consumer <- as.factor(hd$CH_consumer)
levels(hd$CH_consumer) <- c("no slow pay or delinquent accounts, but sufficient references for determination", "One or two slow pay accounts each with one or two payments 30 days past due", "More than two slow pay accounts each with one or two payments 30 days past due; or one or two chronic slow pay accounts with three or more payments 30 days paste due in any 12-month period", "insufficient credit history or references for determination", "delinquent credit history containing accounts with a history of payments 60 days past due", "Serious delinquencies containing accounts with a history of payments 90 days past due") #should I shorten these?*****
hd$CH_public <- as.factor(hd$CH_public)
levels(hd$CH_public) <- c("Info not included or no public record defaults", "Bankruptcy or defaults") #there are multiple 0 and 1's with different labels - can't change now because we don't know which 0's and 1's are which, therefore all 0's will be 0 and all 1's will be 1.
hd$F_or_A_loan[hd$F_or_A_loan == 3] <- NA
hd$F_or_A_loan <- as.factor(hd$F_or_A_loan)
levels(hd$F_or_A_loan) <- c("Adjustable", "Fixed")
hd$PMIsought <- as.factor(hd$PMIsought)
levels(hd$PMIsought) <- c("No or info not available", "Yes")
hd$PMIdenied <- as.factor(hd$PMIdenied)
levels(hd$PMIdenied)  <- c("PMI approve, did not apply, or info not available", "PMI sought and DENIED")
hd$GrantDP <- as.factor(hd$GrantDP)
levels(hd$GrantDP) <- c("No or not available", "Yes")
hd$CoSign <- as.factor(hd$CoSign)
levels(hd$CoSign) <- c("No or not available", "Yes")
hd$UnverInfo <- as.factor(hd$UnverInfo)
levels(hd$UnverInfo) <- c("Not applicable (all verifiable)", "Some information unverifiable")
hd$rtdum <- as.factor(hd$rtdum)
levels(hd$rtdum) <- c("≤ .30", "> .30")
hd$bd <- as.factor(hd$bd)
levels(hd$bd) <- c("≤ MSA median", "> MSA median")
hd$mi <- as.factor(hd$mi)
levels(hd$mi) <- c("≤ MSA median", "> MSA median")
hd$old[hd$old==2] <- NA #remove "missing" factor
hd$old <- as.factor(hd$old)
levels(hd$old) <- c("≤ MSA median", "> MSA median")
hd$vr <- as.factor(hd$vr)
levels(hd$vr) <- c("≤ MSA median", "> MSA median")
hd$dnotown <- as.factor(hd$dnotown)
levels(hd$dnotown) <- c("Owner Occupied", "Not owner occupied, or information not available")
# Chunk 6: Summary Statistics and Frequencies
library(skimr)
library(gtsummary)
library(gapminder)
library(vtable)
library(psych)
library(summarytools)
skim(hd)
print(dfSummary(hd,
plain.ascii = FALSE,
varnumbers = FALSE,
graph.magnif = 0.75,
valid.col    = FALSE),
method = "render")
# Chunk 7
cor(hd[,unlist(lapply(hd, is.numeric))], use = "complete.obs")
cor(hd$`Debt/IncomeTotal`,hd$school, use = "complete.obs")
cor(hd$TotalMIncomeApp,hd$school, use = "complete.obs")
hist(hd$`Debt/IncomeTotal`, xlab = "Debt/Income Total (in thousands)", xlim = c(0,150), breaks = 50)
hist(hd$school, xlab = "Years of Education", xlim = c(0,30), breaks = 15)
plot(hd$school,hd$TotalMIncomeApp, xlab = "Years of Education", ylab = "Total Monthly Income of Applicant")
plot(hd$school, hd$netw, ylim = c(-100,2000), xlab = "Years of Education", ylab = "Net Worth")
# More plots are in the figure above
# Chunk 8
hist(hd$YearsAppJob)
hd$YearsAppJob <- sqrt(hd$YearsAppJob) #skewed right
hist(hd$YearsAppJob, breaks = 20)
summary(hd$YearsAppJob)
hist(hd$YearsAppLW)
hd$YearsAppLW <- sqrt(hd$YearsAppLW) #skewed right
hist(hd$YearsAppLW, breaks = 20)
summary(hd$YearsAppLW)
hist(hd$TotalMIncomeApp)
hd$TotalMIncomeApp <- sqrt(hd$TotalMIncomeApp) #skewed
hist(hd$TotalMIncomeApp, breaks = 50)
summary(hd$TotalMIncomeApp)
hist(hd$TotalMIncomeCoApp)
hd$TotalMIncomeCoApp <- sqrt(hd$TotalMIncomeCoApp) #skewed right
hist(hd$TotalMIncomeCoApp, breaks = 50)
summary(hd$TotalMIncomeCoApp)
hist(hd$LiquidAssets)
hd$LiquidAssets <- sqrt(hd$LiquidAssets) #skewed right
hist(hd$LiquidAssets, breaks = 50)
summary(hd$LiquidAssets)
# Chunk 9
library(pROC)
library(rpart.plot)
library(rpart.plot)
library(party)
library(randomForest)
library(e1071)
library(jtools)
fit.hd <- glm(TypeAction ~ ., data = hd, family = "binomial", na.action = na.roughfix)
summ(fit.hd) #***
prob.dh <-predict(fit.hd, hd, type = "response", na.action = na.roughfix)
logit.pred <- factor(prob.dh > .50, levels = c(FALSE, TRUE),labels = c("Loan Denied", "Loan Approved")) #why would I get NA's here and how can I get rid of them?
logit.perf <-  table(hd$TypeAction, logit.pred, dnn = c("Actual", "Predicted"))
logit.perf
# Chunk 10
my_roc <- roc(hd$TypeAction ~ prob.dh, plot = TRUE)
auc(my_roc)
# Chunk 11
# Finds Optimal threshold
coords(my_roc, "best", ret = "threshold")
threshold <- my_roc$thresholds[which.max(my_roc$sensitivities + my_roc$specificities)]
threshold
logit.pred.thresh <- factor(prob.dh > threshold, levels = c(FALSE, TRUE),labels = c("Loan Denied", "Loan Approved")) #why would I get NA's here and how can I get rid of them?
logit.perf.thresh <-  table(hd$TypeAction, logit.pred.thresh, dnn = c("Actual", "Predicted"))
logit.perf.thresh
# Chunk 12
logit.pred70<- factor(prob.dh > .70, levels = c(FALSE, TRUE),labels = c("Loan Denied", "Loan Approved")) #why would I get NA's here and how can I get rid of them?
logit.perf70 <-  table(hd$TypeAction, logit.pred70, dnn = c("Actual", "Predicted"))
logit.perf70
# Chunk 13
logit.pred65<- factor(prob.dh > .65, levels = c(FALSE, TRUE),labels = c("Loan Denied", "Loan Approved")) #why would I get NA's here and how can I get rid of them?
logit.perf65 <-  table(hd$TypeAction, logit.pred65, dnn = c("Actual", "Predicted"))
logit.perf65
# Chunk 14
logit.pred85<- factor(prob.dh > .85, levels = c(FALSE, TRUE),labels = c("Loan Denied", "Loan Approved")) #why would I get NA's here and how can I get rid of them?
logit.perf85 <-  table(hd$TypeAction, logit.pred85, dnn = c("Actual", "Predicted"))
logit.perf85
# Chunk 15
logit.pred80<- factor(prob.dh > .80, levels = c(FALSE, TRUE),labels = c("Loan Denied", "Loan Approved")) #why would I get NA's here and how can I get rid of them?
logit.perf80 <-  table(hd$TypeAction, logit.pred80, dnn = c("Actual", "Predicted"))
logit.perf80
# Chunk 16
logit.pred05<- factor(prob.dh > .05, levels = c(FALSE, TRUE),labels = c("Loan Denied", "Loan Approved")) #why would I get NA's here and how can I get rid of them?
logit.perf05 <-  table(hd$TypeAction, logit.pred05, dnn = c("Actual", "Predicted"))
logit.perf05
# Chunk 17
logit.pred60<- factor(prob.dh > .60, levels = c(FALSE, TRUE),labels = c("Loan Denied", "Loan Approved")) #why would I get NA's here and how can I get rid of them?
logit.perf60 <-  table(hd$TypeAction, logit.pred60, dnn = c("Actual", "Predicted"))
logit.perf60
# Chunk 18
logit.pred55<- factor(prob.dh > .55, levels = c(FALSE, TRUE),labels = c("Loan Denied", "Loan Approved")) #why would I get NA's here and how can I get rid of them?
logit.perf55 <-  table(hd$TypeAction, logit.pred55, dnn = c("Actual", "Predicted"))
logit.perf55
# Chunk 19
logit.pred30<- factor(prob.dh > .30, levels = c(FALSE, TRUE),labels = c("Loan Denied", "Loan Approved")) #why would I get NA's here and how can I get rid of them?
logit.perf30 <-  table(hd$TypeAction, logit.pred30, dnn = c("Actual", "Predicted"))
logit.perf30
# Chunk 20
logit.pred25<- factor(prob.dh > .25, levels = c(FALSE, TRUE),labels = c("Loan Denied", "Loan Approved")) #why would I get NA's here and how can I get rid of them?
logit.perf25 <-  table(hd$TypeAction, logit.pred25, dnn = c("Actual", "Predicted"))
logit.perf25
# Chunk 21
#performance function
performance <- function(table, n = 4){
if(!all(dim(table) == c(2,2)))
stop("Must be a 2 x 2 table")
tn = table[1,1]
fp = table[1,2]
fn = table[2,1]
tp = table[2,2]
sensitivity = tp/(tp+fn)
specificity = tn/(tn+fp)
ppp = tp/(tp+fp)
npp = tn/(tn+fp)
hitrate = (tp+tn)/(tp+tn+fp+fn)
result <- paste0("Sensitivity = ", round(sensitivity,n),
"\nSpecificity = ",round(specificity,n),
"\nPositive Predictive Value = ", round(ppp,n),
"\nNegative Predictive Value = ", round(npp,n),
"\nAccuracy = ", round(hitrate,n))
cat(result)
}
performance(logit.perf05) # 0.05
performance(logit.perf25) # 0.25
performance(logit.perf30) # 0.30
performance(logit.perf) # 0.50
performance(logit.perf55) # 0.55**
performance(logit.perf60) # 0.60
performance(logit.perf65) # 0.65
performance(logit.perf70) # 0.70
performance(logit.perf80) # 0.80
performance(logit.perf85) # 0.85
performance(logit.perf.thresh) # 0.8979749
# Chunk 22
# do a cross
#install.packages("boot")
library(boot)
set.seed(1234)
train <- sample(nrow(hd), 0.7*nrow(hd))
hd.train <-  hd[train,]
hd.validate <- hd[-train,]
hd.train <- (na.roughfix(hd.train))
hd.validate <- (na.roughfix(hd.validate)) #replaces with mean or median depending on data type
table(hd.train$TypeAction)
table(hd.validate$TypeAction)
#cv.glm(hd.train, fit.hd, K = 10) #error with RaceCoApp column 33
train.fit <- cv.glm(data = hd.train[,-33], glmfit =  fit.hd, K = 10)
# Chunk 23
prediction <- predict(fit.hd, hd.validate, type = "response", select =train.fit$delta[2], na.action = na.roughfix)
cv.pred50 <- factor(prediction > .50, levels = c(FALSE, TRUE),labels = c("Loan Denied", "Loan Approved"))
cv.perf50 <-  table(hd.validate$TypeAction, cv.pred50, dnn = c("Actual", "Predicted"))
cv.perf50
# Chunk 24
my_roc.cv <- roc(hd.validate$TypeAction ~ prediction, plot = TRUE)
auc(my_roc.cv)
coords(my_roc.cv, "best", ret = "threshold")
threshold.cv <- my_roc.cv$thresholds[which.max(my_roc.cv$sensitivities + my_roc.cv$specificities)]
threshold.cv
cv.pred.thresh <- factor(prediction > threshold.cv, levels = c(FALSE, TRUE),labels = c("Loan Denied", "Loan Approved"))
cv.perf.thresh <-  table(hd.validate$TypeAction, cv.pred.thresh, dnn = c("Actual", "Predicted"))
cv.perf.thresh
# Chunk 25
cv.pred10 <- factor(prediction > .10, levels = c(FALSE, TRUE),labels = c("Loan Denied", "Loan Approved"))
cv.perf10 <-  table(hd.validate$TypeAction, cv.pred10, dnn = c("Actual", "Predicted"))
cv.perf10
# Chunk 26
cv.pred25 <- factor(prediction > .25, levels = c(FALSE, TRUE),labels = c("Loan Denied", "Loan Approved"))
cv.perf25 <-  table(hd.validate$TypeAction, cv.pred25, dnn = c("Actual", "Predicted"))
cv.perf25
# Chunk 27
cv.pred40 <- factor(prediction > .40, levels = c(FALSE, TRUE),labels = c("Loan Denied", "Loan Approved"))
cv.perf40 <-  table(hd.validate$TypeAction, cv.pred40, dnn = c("Actual", "Predicted"))
cv.perf40
# Chunk 28
cv.pred55 <- factor(prediction > .55, levels = c(FALSE, TRUE),labels = c("Loan Denied", "Loan Approved"))
cv.perf55 <-  table(hd.validate$TypeAction, cv.pred55, dnn = c("Actual", "Predicted"))
cv.perf55
# Chunk 29
cv.pred60 <- factor(prediction > .60, levels = c(FALSE, TRUE),labels = c("Loan Denied", "Loan Approved"))
cv.perf60 <-  table(hd.validate$TypeAction, cv.pred60, dnn = c("Actual", "Predicted"))
cv.perf60
# Chunk 30
cv.pred65 <- factor(prediction > .65, levels = c(FALSE, TRUE),labels = c("Loan Denied", "Loan Approved"))
cv.perf65 <-  table(hd.validate$TypeAction, cv.pred65, dnn = c("Actual", "Predicted"))
cv.perf65
# Chunk 31
cv.pred75 <- factor(prediction > .75, levels = c(FALSE, TRUE),labels = c("Loan Denied", "Loan Approved"))
cv.perf75 <-  table(hd.validate$TypeAction, cv.pred75, dnn = c("Actual", "Predicted"))
cv.perf75
# Chunk 32
performance(cv.perf10)
performance(cv.perf25)
performance(cv.perf40)
performance(cv.perf50)
performance(cv.perf55)
performance(cv.perf60) #***
performance(cv.perf65)
performance(cv.perf75)
performance(cv.perf.thresh) # 0.946
# Chunk 33
pre <- predict(fit.hd, hd, type = "response", select =train.fit$delta[2], na.action = na.roughfix)
xcv.pred60 <- factor(pre > .60, levels = c(FALSE, TRUE),labels = c("Loan Denied", "Loan Approved"))
xcv.perf60 <-  table(hd$TypeAction, xcv.pred60, dnn = c("Actual", "Predicted"))
xcv.perf60
# Chunk 34
my_roc.cvx <- roc(hd$TypeAction ~ pre, plot = TRUE)
auc(my_roc.cvx)
# Chunk 35
xcv.perf60
summ(fit.hd)
